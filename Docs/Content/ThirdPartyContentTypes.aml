<?xml version="1.0" encoding="utf-8"?>
<topic id="df2a45c1-1996-46f6-9d33-e73f0fa1d88a" revisionNumber="1">
	<developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
		<introduction>
			<para>A NuGet package is available that will allow you to enable spell checking for third-party content
types within Visual Studio (<legacyBold>EWSoftware.VSSpellChecker</legacyBold>).  This topic provides a simple
example of a tagger that enables spell checking for such third-party content types.</para>

			<alert class="note">
				<para>The NuGet package version may not match the version of the latest release of the spell checker
package.  This is normal.  The NuGet package assembly version only changes when it contains a breaking change
that will require rebuilding any code that utilizes it.</para>
			</alert>
		</introduction>

		<section>
			<content>
				<para>Once you have installed the NuGet package in your project, add a new class file to the project that
implements the content type you want to support.  Replace the new class's content with the following code:</para>
				
<code language="cs" title="Example Tagger">
using System;
using System.Collections.Generic;
using System.ComponentModel.Composition;

using Microsoft.VisualStudio.Text;
using Microsoft.VisualStudio.Text.Tagging;
using Microsoft.VisualStudio.Utilities;

using VisualStudio.SpellChecker.Definitions;

namespace ExampleTagger.SpellCheckSupport
{
    /// &lt;summary&gt;
    /// Define a class to serve as the tag
    /// &lt;/summary&gt;
    class NaturalTextTag : INaturalTextTag
    {
    }

    /// &lt;summary&gt;
    /// Implement the tagger provider
    /// &lt;/summary&gt;
    [Export(typeof(ITaggerProvider))]
    [ContentType("MyCustomContentType")] // IMPORTANT: Specify your content type here
    [TagType(typeof(NaturalTextTag))]
    class MyCustomContentTypeNaturalTextTaggerProvider : ITaggerProvider
    {
        /// &lt;inheritdoc /&gt;
        public ITagger&lt;T&gt; CreateTagger&lt;T&gt;(ITextBuffer buffer) where T : ITag
        {
            return new MyCustomContentTypeNaturalTextTagger() as ITagger&lt;T&gt;;
        }
    }

    /// &lt;summary&gt;
    /// Implement the tagger
    /// &lt;/summary&gt;
    class MyCustomContentTypeNaturalTextTagger : ITagger&lt;NaturalTextTag&gt;
    {
        /// &lt;summary&gt;
        /// This is a simple tagger that returns tags for the normalized snapshot
        /// span collection.
        /// &lt;/summary&gt;
        /// &lt;param name="spans"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public IEnumerable&lt;ITagSpan&lt;NaturalTextTag&gt;&gt; GetTags(NormalizedSnapshotSpanCollection spans)
        {
            foreach(var snapshotSpan in spans)
                yield return new TagSpan&lt;NaturalTextTag&gt;(snapshotSpan, new NaturalTextTag());
        }

#pragma warning disable 67
        /// &lt;inheritdoc /&gt;
        /// &lt;remarks&gt;Not used by this tagger&lt;/remarks&gt;
        public event EventHandler&lt;SnapshotSpanEventArgs&gt; TagsChanged;
#pragma warning restore 67
    }
}
</code>

				<para>Be sure to specify your custom content type in the <codeInline>ContentType</codeInline> attribute
on the tagger provider class where indicated.  The tagger above is a basic one that simply returns a tag span for
each normalized snapshot span.  More complex taggers can make use of a classifier to further examine each
snapshot span and determine if the span should be included for spell checking.  See the tagger classes in the
spell checker project for more complex examples.</para>
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="deeba4a0-5a5f-497c-a9c1-7dec64e9c2bf" />
			<link xlink:href="0ff35371-69b5-48dd-a062-037abe2469de" />
		</relatedTopics>
	</developerConceptualDocument>
</topic>
